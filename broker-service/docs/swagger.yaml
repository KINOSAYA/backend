basePath: /
definitions:
  handlers.jsonResponse:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  handlers.registrationPayload:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.tempTokenReqPayload:
    properties:
      token:
        type: string
    type: object
  handlers.token:
    properties:
      token:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: kinosaya API
  version: "1.0"
paths:
  /:
    get:
      description: Returns a JSON response with success status.
      operationId: get-sample-response
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
      summary: hit the broker
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with the given data.
      parameters:
      - description: User data
        in: body
        name: registrationPayload
        required: true
        schema:
          $ref: '#/definitions/handlers.registrationPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Successful registration
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
      summary: Logs a user
      tags:
      - Auth
  /auth/parse-token:
    post:
      consumes:
      - application/json
      description: token validation (token is alive for 24 hours
      parameters:
      - description: User data
        in: body
        name: registrationPayload
        required: true
        schema:
          $ref: '#/definitions/handlers.tempTokenReqPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Successful registration
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
      summary: token parser
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes an access token using a refresh token.
      operationId: refreshAccessToken
      parameters:
      - description: Refresh token structure
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/handlers.token'
      produces:
      - application/json
      responses:
        "202":
          description: Token refresh successful
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
      summary: Refresh Access Token
      tags:
      - Auth
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Registers a new user with the specified data.
      parameters:
      - description: User data
        in: body
        name: registrationPayload
        required: true
        schema:
          $ref: '#/definitions/handlers.registrationPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Successful registration
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
      summary: Register a new user
      tags:
      - Auth
  /kinopoisk/films:
    get:
      description: Retrieve films based on the provided slug.
      parameters:
      - description: The slug of the film
        in: query
        name: slug
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: string
      - description: Number of items per page
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
      summary: Get Films by Slug
      tags:
      - Kinopoisk
  /kinopoisk/slugs:
    get:
      description: This endpoint communicates with the Kinopoisk API to fetch JSON
        data containing information about slugs by chosen category.
      parameters:
      - description: Page of results
        in: query
        name: page
        type: string
      - description: Limit records for one page
        in: query
        name: limit
        type: string
      - description: Category e.g. ('Фильмы', 'Сериалы')
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful request
          schema:
            $ref: '#/definitions/handlers.jsonResponse'
      summary: Get Collection
      tags:
      - Kinopoisk
swagger: "2.0"
